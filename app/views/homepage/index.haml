- slider_images = SliderImage.all
.container-fluid
  .row.top
    #bs-carousel.carousel.fade-carousel.slide{"data-interval" => "12000", "data-ride" => "carousel"}
      / Indicators
      %ol.carousel-indicators
        -(0...slider_images.count).each do |val|
          %li{ :class=>"#{(val==0 ? 'active' : '')}", "data-slide-to" => "#{val}", "data-target" => "#bs-carousel"}
      / Wrapper for slides
      .carousel-inner
        - slider_images.each_with_index do |slide,index|
          - if index == 0
            .item.slides.active
              .slide
                %img{:alt => "slide", :src => "#{slide.avatar}", :width => "1920", :height => "450"}/
              .hero
                %hgroup
                  %h1.gap-10
                    Where would you like to
                    = succeed "work" do
                      %br/
                    today?
                  %h3 Your Office Anywhere, Anytime
                %form.navbar-form{:role => "search"}
                  .input-group.wid-100
                    %input.form-control{:name => "q", :placeholder => "Search", :type => "text"}
                      .input-group-btn
                        %button.btn.btn-danger.wid-100{:type => "submit",:style=>"margin-top: 0px;"} search
          - else
            .item.slides
              .slide
                %img{:alt => "slide", :src => "#{slide.avatar}", :width => "1920", :height => "450"}/
              .hero
                %hgroup
                  %h1.gap-10
                    Where would you like to
                    = succeed "work" do
                      %br/
                    today?
                  %h3 Your Office Anywhere, Anytime
                %form.navbar-form{:role => "search"}
                  .input-group.wid-100
                    %input.form-control{:name => "q", :placeholder => "Search", :type => "text"}
                      .input-group-btn
                        %button.btn.btn-danger.wid-100{:type => "submit",:style=>"margin-top: 0px;"} search
           
      / carousel-inner close
    / carousel close
  / row close
/ container-fluid close
.container-fluid
  .row
    .col-md-12.pad-top-10.scroll2
      %form#commentForm.form-horizontal{:action => "#", :method => "post", :role => "form"}
        .form-group.row
          .col-sm-2.gap-10
            %label City
          .col-sm-4.gap-10
            %select#sel1.form-control
              - if params[:category] == "all"
                %option{:value=>"all", :selected=>"selected"  }
                  = (link_to t("homepage.filters.all_categories"), params.merge({category: "all"}), :class => "home-categories-main #{if @selected_category.nil? then 'selected' end}").html_safe
              - else
                %option{:value=>"all"}
                  = (link_to t("homepage.filters.all_categories"), params.merge({category: "all"}), :class => "home-categories-main #{if @selected_category.nil? then 'selected' end}")
              - @main_categories.each do |category|
                - show_subcategories = show_subcategory_list(category, Maybe(@selected_category).id.to_i.or_else(nil))
                
                - if params[:category] == category.display_name(I18n.locale).downcase
                  %option{:value=> category.display_name(I18n.locale), :selected=>"selected" }
                    = link_to category.display_name(I18n.locale), params.merge({category: category}), :class => "home-categories-main #{if show_subcategories then 'selected' end} #{if category.has_subcategories? then 'has-subcategories' end}", :data => {category: category.id}
                - else
                  %option{:value=> category.display_name(I18n.locale)}
                    = link_to category.display_name(I18n.locale), params.merge({category: category}), :class => "home-categories-main #{if show_subcategories then 'selected' end} #{if category.has_subcategories? then 'has-subcategories' end}", :data => {category: category.id}
                - if category.children
                  - if show_subcategories
                    - category.children.each do |child|
                      - is_selected = @selected_category == child
                      
                      - if params[:category] == child.display_name(I18n.locale).downcase
                        %option{:value=> child.display_name(I18n.locale), :selected=> "selected" }
                          = link_to child.display_name(I18n.locale), params.merge({category: child}), :class => "home-categories-sub #{if is_selected then 'selected' end}", :data => {:"sub-category" =>child.id}
                      -else 
                        %option{:value=> child.display_name(I18n.locale) }
                          = link_to child.display_name(I18n.locale), params.merge({category: child}), :class => "home-categories-sub #{if is_selected then 'selected' end}", :data => {:"sub-category" =>child.id}
          .col-sm-2.gap-10
            %label Spacessy Type
          .col-sm-4.gap-10
            %select#sel1.form-control
              %option{:value => "1"} Option
              %option{:value => "1"} Option1
              %option{:value => "1"} Option2
              %option{:value => "1"} Option3
        .form-group.row
          .col-sm-2.gap-10
            %label{:for => "amount"} Price range:
          .col-md-10.gap-10
            %input#amount.gap-10{:readonly => "", :style => "border:0; color:#FF6666;", :type => "text"}
              #slider-range
                
      .row.pad-top-20
        .col-sm-12.sidebar
          %button.btn.btn-danger.mini-submenu{:role => "button", :style => "display: block;"} More
          .list-group{:style=>"display:none;"}
            %span.list-group-item.active
              Submenu
              %span#slide-submenu.pull-right
                %i.fa.fa-times
            .form-group
              #close.col-sm-12.gap-10{:style => "text-align:right;", :type => "button"} X         
              - @current_community.custom_fields.sort.each do |field|                
                - field.with_type do |type|
                  .col-sm-6.gap-10
                    - if [:dropdown, :checkbox].include?(type)
                      %h4  
                        = field.name(I18n.locale)
                      %hr
                      - make_scrollable = field.options.size > 10
                      - field.options.sort.each do |option|
                    
                        %label{:style=>"font-weight: 200 !important;"}
                          - param_name = type == :dropdown ? "filter_option_#{option.id}" : "checkbox_filter_option_#{option.id}"
                          = check_box_tag param_name, "#{option.id}", params[param_name]
                          %span 
                            = option.title(I18n.locale)



                - field.with(:numeric) do
                  .row
                    .col-12
                      .custom-filter-title
                        = field.name(I18n.locale)
                  .row
                    .col-12
                      .custom-filter-options
                        - id = ["range-slider", field.id].join("-")
                        .range-slider{id: id}
                          - range = [field.min, field.max]
                          - start = [params["nf_min_" + field.id.to_s] || field.min, params["nf_max_" + field.id.to_s] || field.max]
                          - labels = ["#custom-filter-min-value-#{id}", "#custom-filter-max-value-#{id}"]
                          - fields = ["#nf_min_#{id}", "#nf_max_#{id}"]

                          - content_for :extra_javascript do
                            :javascript
                              window.ST.rangeFilter("##{id}", #{range}, #{start}, #{labels}, #{fields}, #{field.allow_decimals})

                  .row
                    .col-12
                      .left
                        %span.custom-filter-min-max-title= t(".min")
                        %span{id: "custom-filter-min-value-#{id}"}
                        %input{type: "hidden", id: "nf_min_#{id}", name: "nf_min_#{field.id}", value: params["nf_min_#{field.id}"]}
                      .right
                        %span.custom-filter-min-max-title= t(".max")
                        %span{id: "custom-filter-max-value-#{id}"}
                        %input{type: "hidden", id: "nf_max_#{id}", name: "nf_max_#{field.id}", value: params["nf_max_#{field.id}"]}

            %br
              .col-sm-8.gap-10
                %button{type: 'submit'}
                  = t("homepage.custom_filters.update_view")
      = render :partial => "new_grid_item", :collection => @listings, :as => :listing


